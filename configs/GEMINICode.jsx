const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  const fs = require("node:fs");
  const mime = require("mime-types");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.5-pro-exp-03-25",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 64,
    maxOutputTokens: 65536,
    responseModalities: [
    ],
    responseMimeType: "text/plain",
  };
  
  const GenerationCode= {
    temperature: 1,
    topP: 0.95,
    topK: 64,
    maxOutputTokens: 65536,
    responseModalities: [
    ],
    responseMimeType: "application/json",
  };
  
  export  const chatSession = model.startChat({
      generationConfig,
      history: [ 
      ],
    });
  

  export const Genaicode=model.startChat({
        generationConfig:GenerationCode,
        history: [
          {
            role: "user",
            parts: [
              {text: "generate a todo app:`\nGenerate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHereâ€™s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   `"},
            ],
          },
          {
            role: "model",
            parts: [
              {text: "The user wants a React Todo App built with Vite and styled with Tailwind CSS.\nIt should use functional components and React hooks.\nIcons should be sourced from `lucide-react`.\nNo other third-party UI libraries are allowed.\nThe output must be a JSON object with a specific schema: `projectTitle`, `explanation`, `files`, and `generatedFiles`.\nThe `files` object should contain the path and code for each file.\nThe `generatedFiles` array should list all created file paths.\nThe explanation should be a concise paragraph.\nDate formatting (`date-fns`) and charting (`react-chartjs-2`) are available but should only be used if requested (not requested for a simple todo app).\nPlaceholder images should use the specified `archive.org` URL.\nEmoji icons can be used for better UX.\nDesigns should be beautiful and production-worthy.\nUse Lucide icons for logos if applicable.\nUse Unsplash images where appropriate (not really applicable for a simple todo app structure).\n\n**Plan:**\n\n1.  **Project Setup:** Define the basic file structure for a Vite + React project.\n2.  **Core Component (`App.js`):** The main application component that will manage the todo state and render other components.\n3.  **Todo Item Component (`components/TodoItem.js`):** Represents a single todo item, including its text, completion status, and actions (edit, delete, toggle complete).\n4.  **Todo List Component (`components/TodoList.js`):** Renders the list of `TodoItem` components.\n5.  **Add Todo Form Component (`components/AddTodoForm.js`):** A form for adding new todos.\n6.  **Styling:** Apply Tailwind CSS classes to all components for styling.\n7.  **State Management:** Use `useState` hook in `App.js` to manage the list of todos.\n8.  **Functionality:** Implement functions for adding, deleting, toggling completion, and potentially editing todos.\n9.  **Icons:** Use `Trash`, `Edit`, `Check`, `X`, `Plus` icons from `lucide-react`.\n10. **JSON Output:** Structure the generated code and explanation into the required JSON format.\n\n**File Structure:**\n\n```\n/public/\n  /index.html\n/src/\n  /components/\n    AddTodoForm.js\n    TodoList.js\n    TodoItem.js\n  App.js\n  index.css  (Tailwind directives)\n  main.jsx   (Vite entry point)\n.gitignore\npackage.json\npostcss.config.js\ntailwind.config.js\nvite.config.js\n```\n\n*Self-Correction/Refinement:*\n*   The request specifies `.js` extension, so use that instead of `.jsx`.\n*   Need to provide basic `index.html`, `main.jsx`, `index.css`, `tailwind.config.js`, `postcss.config.js` and `package.json` for a complete Vite setup runnable in environments like Sandpack.\n*   The `files` object in the JSON should use paths relative to the root, e.g., `/src/App.js`.\n*   Will use local storage to persist todos for a better UX, although not explicitly requested, it makes the app more practical.\n*   Keep the initial `App.js` simple, managing state and rendering the main components.\n*   Add clear comments explaining the code.\n*   Ensure Tailwind classes provide a decent, non-cookie-cutter look. Use some gradients or subtle effects.\n*   Add a simple header.\n\n**Generating Code:**\n\n*   **`package.json`:** Basic dependencies for React, Vite, Tailwind, PostCSS, Autoprefixer, and `lucide-react`.\n*   **`vite.config.js`:** Standard Vite config for React.\n*   **`tailwind.config.js`:** Basic Tailwind config.\n*   **`postcss.config.js`:** Config for Tailwind and Autoprefixer.\n*   **`index.html`:** Standard HTML entry point for Vite.\n*   **`main.jsx`:** Renders the `App` component into the DOM. (Using `.jsx` here as it's the standard Vite convention, although the user asked for `.js` for components. Will stick to `.js` for components as requested). Change `main.jsx` to `main.js`.\n*   **`index.css`:** Include Tailwind directives.\n*   **`App.js`:** Main component with state management (using `useState` and `useEffect` for local storage) and rendering child components.\n*   **`AddTodoForm.js`:** Form with input and add button (`Plus` icon).\n*   **`TodoList.js`:** Maps over todos and renders `TodoItem`.\n*   **`TodoItem.js`:** Displays todo text, handles toggle complete (`Check` icon), edit (`Edit` icon - potentially defer this for simplicity initially, maybe just delete and toggle), and delete (`Trash` icon). Add edit functionality. Use state for editing mode.\n\n*Refinement during coding:*\n*   Make sure IDs are unique for todos (use `Date.now()` or a simple counter).\n*   Handle empty input in the AddTodoForm.\n*   Add some visual feedback on actions (e.g., strike-through for completed items).\n*   Structure the `files` object correctly in the final JSON.\n*   Write the concise explanation.\n*   List all generated files in `generatedFiles`."},
              {text: "```json\n{\n  \"projectTitle\": \"React Todo App\",\n  \"explanation\": \"This project is a functional Todo application built using React and Vite, styled with Tailwind CSS. It allows users to add, view, mark as complete, edit, and delete tasks. State is managed within the main App component using React hooks (`useState`, `useEffect`), and tasks are persisted in the browser's local storage. Components are organized into separate files for better maintainability, using `lucide-react` for icons.\",\n  \"files\": {\n    \"/package.json\": {\n      \"code\": \"{\\n  \\\"name\\\": \\\"react-todo-app\\\",\\n  \\\"private\\\": true,\\n  \\\"version\\\": \\\"0.0.0\\\",\\n  \\\"type\\\": \\\"module\\\",\\n  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"vite\\\",\\n    \\\"build\\\": \\\"vite build\\\",\\n    \\\"lint\\\": \\\"eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0\\\",\\n    \\\"preview\\\": \\\"vite preview\\\"\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"^18.2.0\\\",\\n    \\\"react-dom\\\": \\\"^18.2.0\\\",\\n    \\\"lucide-react\\\": \\\"^0.378.0\\\" \\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"@types/react\\\": \\\"^18.2.66\\\",\\n    \\\"@types/react-dom\\\": \\\"^18.2.22\\\",\\n    \\\"@vitejs/plugin-react\\\": \\\"^4.2.1\\\",\\n    \\\"autoprefixer\\\": \\\"^10.4.19\\\",\\n    \\\"eslint\\\": \\\"^8.57.0\\\",\\n    \\\"eslint-plugin-react\\\": \\\"^7.34.1\\\",\\n    \\\"eslint-plugin-react-hooks\\\": \\\"^4.6.0\\\",\\n    \\\"eslint-plugin-react-refresh\\\": \\\"^0.4.6\\\",\\n    \\\"postcss\\\": \\\"^8.4.38\\\",\\n    \\\"tailwindcss\\\": \\\"^3.4.3\\\",\\n    \\\"vite\\\": \\\"^5.2.0\\\"\\n  }\\n}\"\n    },\n    \"/vite.config.js\": {\n      \"code\": \"import { defineConfig } from 'vite'\\nimport react from '@vitejs/plugin-react'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [react()],\\n})\\n\"\n    },\n    \"/tailwind.config.js\": {\n      \"code\": \"/** @type {import('tailwindcss').Config} */\\nexport default {\\n  content: [\\n    \\\"./index.html\\\",\\n    \\\"./src/**/*.{js,ts,jsx,tsx}\\\",\\n  ],\\n  theme: {\\n    extend: {\\n       colors: {\\n        'primary': '#6D28D9', // Violet-700\\n        'secondary': '#EDE9FE', // Violet-100\\n        'accent': '#EC4899', // Pink-500\\n      },\\n       fontFamily: {\\n        sans: ['Inter', 'sans-serif'],\\n      },\\n    },\\n  },\\n  plugins: [],\\n}\\n\"\n    },\n    \"/postcss.config.js\": {\n      \"code\": \"export default {\\n  plugins: {\\n    tailwindcss: {},\\n    autoprefixer: {},\\n  },\\n}\\n\"\n    },\n    \"/index.html\": {\n      \"code\": \"<!doctype html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <link rel=\\\"preconnect\\\" href=\\\"https://fonts.googleapis.com\\\">\\n    <link rel=\\\"preconnect\\\" href=\\\"https://fonts.gstatic.com\\\" crossorigin>\\n    <link href=\\\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\\\" rel=\\\"stylesheet\\\">\\n    <title>React Todo App</title>\\n  </head>\\n  <body>\\n    <div id=\\\"root\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"/src/main.js\\\"></script>\\n  </body>\\n</html>\\n\"\n    },\n    \"/src/main.js\": {\n      \"code\": \"import React from 'react'\\nimport ReactDOM from 'react-dom/client'\\nimport App from './App.js'\\nimport './index.css'\\n\\nReactDOM.createRoot(document.getElementById('root')).render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>,\\n)\\n\"\n    },\n    \"/src/index.css\": {\n      \"code\": \"@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n\\nbody {\\n  @apply bg-gradient-to-br from-violet-100 via-white to-pink-50 min-h-screen font-sans antialiased;\\n}\\n\\n/* Custom scrollbar for webkit browsers */\\n::-webkit-scrollbar {\\n  width: 8px;\\n}\\n\\n::-webkit-scrollbar-track {\\n  background: #f1f1f1;\\n  border-radius: 10px;\\n}\\n\\n::-webkit-scrollbar-thumb {\\n  background: #a78bfa; /* Violet-400 */\\n  border-radius: 10px;\\n}\\n\\n::-webkit-scrollbar-thumb:hover {\\n  background: #8b5cf6; /* Violet-500 */\\n}\\n\"\n    },\n    \"/src/App.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport AddTodoForm from './components/AddTodoForm.js';\\nimport TodoList from './components/TodoList.js';\\nimport { Check } from 'lucide-react'; // Using Check as a logo element\\n\\nfunction App() {\\n  // Initialize state from local storage or default to an empty array\\n  const [todos, setTodos] = useState(() => {\\n    const savedTodos = localStorage.getItem('todos');\\n    return savedTodos ? JSON.parse(savedTodos) : [];\\n  });\\n\\n  // Persist todos to local storage whenever they change\\n  useEffect(() => {\\n    localStorage.setItem('todos', JSON.stringify(todos));\\n  }, [todos]);\\n\\n  const addTodo = (text) => {\\n    const newTodo = {\\n      id: Date.now(), // Simple unique ID\\n      text: text,\\n      completed: false\\n    };\\n    setTodos([...todos, newTodo]);\\n  };\\n\\n  const toggleComplete = (id) => {\\n    setTodos(\\n      todos.map(todo =>\\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\\n      )\\n    );\\n  };\\n\\n  const deleteTodo = (id) => {\\n    setTodos(todos.filter(todo => todo.id !== id));\\n  };\\n\\n  const editTodo = (id, newText) => {\\n    setTodos(\\n      todos.map(todo =>\\n        todo.id === id ? { ...todo, text: newText } : todo\\n      )\\n    );\\n  };\\n\\n  return (\\n    <div className=\\\"min-h-screen flex items-center justify-center p-4\\\">\\n      <div className=\\\"bg-white rounded-xl shadow-2xl w-full max-w-lg p-6 md:p-8 backdrop-blur-sm bg-opacity-90 border border-gray-200\\\">\\n        <header className=\\\"flex items-center justify-center mb-6 pb-4 border-b border-gray-200\\\">\\n          <Check className=\\\"w-8 h-8 text-primary mr-3\\\" />\\n          <h1 className=\\\"text-3xl font-bold text-gray-800\\\">My Tasks âœ…</h1>\\n        </header>\\n        \\n        <main>\\n          <AddTodoForm onAddTodo={addTodo} />\\n          <div className=\\\"mt-6 max-h-96 overflow-y-auto pr-2\\\">\\n             {todos.length === 0 ? (\\n               <p className=\\\"text-center text-gray-500 italic\\\">No tasks yet! Let's add some. âœ¨</p>\\n             ) : (\\n               <TodoList\\n                 todos={todos}\\n                 onToggleComplete={toggleComplete}\\n                 onDeleteTodo={deleteTodo}\\n                 onEditTodo={editTodo}\\n               />\\n             )}\\n          </div>\\n        </main>\\n         <footer className=\\\"mt-6 pt-4 border-t border-gray-200 text-center text-xs text-gray-400\\\">\\n            You have {todos.filter(t => !t.completed).length} pending tasks.\\n         </footer>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\"\n    },\n    \"/src/components/AddTodoForm.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\n\\nfunction AddTodoForm({ onAddTodo }) {\\n  const [inputText, setInputText] = useState('');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (!inputText.trim()) return; // Don't add empty todos\\n    onAddTodo(inputText);\\n    setInputText(''); // Clear input after adding\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\\"flex items-center gap-3\\\">\\n      <input\\n        type=\\\"text\\\"\\n        value={inputText}\\n        onChange={(e) => setInputText(e.target.value)}\\n        placeholder=\\\"Add a new task... ðŸš€\\\"\\n        className=\\\"flex-grow p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition duration-200\\\"\\n      />\\n      <button\\n        type=\\\"submit\\\"\\n        className=\\\"bg-primary text-white p-3 rounded-lg hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 transition duration-200 flex items-center justify-center shrink-0\\\"\\n        aria-label=\\\"Add task\\\"\\n      >\\n        <Plus className=\\\"w-5 h-5\\\" />\\n      </button>\\n    </form>\\n  );\\n}\\n\\nexport default AddTodoForm;\\n\"\n    },\n    \"/src/components/TodoList.js\": {\n      \"code\": \"import React from 'react';\\nimport TodoItem from './TodoItem.js';\\n\\nfunction TodoList({ todos, onToggleComplete, onDeleteTodo, onEditTodo }) {\\n  return (\\n    <ul className=\\\"space-y-3\\\">\\n      {todos.map((todo) => (\\n        <TodoItem\\n          key={todo.id}\\n          todo={todo}\\n          onToggleComplete={onToggleComplete}\\n          onDeleteTodo={onDeleteTodo}\\n          onEditTodo={onEditTodo}\\n        />\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nexport default TodoList;\\n\"\n    },\n    \"/src/components/TodoItem.js\": {\n      \"code\": \"import React, { useState, useRef, useEffect } from 'react';\\nimport { Trash, Edit, Check, X } from 'lucide-react';\\n\\nfunction TodoItem({ todo, onToggleComplete, onDeleteTodo, onEditTodo }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const [editText, setEditText] = useState(todo.text);\\n  const inputRef = useRef(null);\\n\\n  // Focus input when editing starts\\n  useEffect(() => {\\n    if (isEditing) {\\n      inputRef.current.focus();\\n      // Move cursor to end of text\\n      inputRef.current.selectionStart = inputRef.current.selectionEnd = editText.length;\\n    }\\n  }, [isEditing, editText.length]);\\n\\n  const handleEdit = () => {\\n    setIsEditing(true);\\n  };\\n\\n  const handleSave = () => {\\n    if (editText.trim()) {\\n      onEditTodo(todo.id, editText.trim());\\n      setIsEditing(false);\\n    } else {\\n      // Optionally handle empty input, maybe revert or show error\\n      // For now, just cancel edit if empty\\n      handleCancel();\\n    }\\n  };\\n\\n  const handleCancel = () => {\\n    setEditText(todo.text); // Revert changes\\n    setIsEditing(false);\\n  };\\n\\n  const handleInputChange = (e) => {\\n    setEditText(e.target.value);\\n  };\\n\\n  const handleInputKeyDown = (e) => {\\n    if (e.key === 'Enter') {\\n      handleSave();\\n    } else if (e.key === 'Escape') {\\n      handleCancel();\\n    }\\n  };\\n\\n  return (\\n    <li className={`flex items-center justify-between p-3 rounded-lg transition duration-200 ease-in-out ${todo.completed ? 'bg-green-50' : 'bg-secondary'}`}>\\n      {isEditing ? (\\n        <div className=\\\"flex-grow flex items-center gap-2 mr-2\\\">\\n           <input\\n            ref={inputRef}\\n            type=\\\"text\\\"\\n            value={editText}\\n            onChange={handleInputChange}\\n            onKeyDown={handleInputKeyDown}\\n            className=\\\"flex-grow p-1 border border-primary rounded bg-white text-gray-800 focus:outline-none\\\"\\n          />\\n           <button onClick={handleSave} className=\\\"text-green-600 hover:text-green-800\\\" aria-label=\\\"Save changes\\\">\\n              <Check className=\\\"w-5 h-5\\\" />\\n           </button>\\n           <button onClick={handleCancel} className=\\\"text-red-500 hover:text-red-700\\\" aria-label=\\\"Cancel edit\\\">\\n               <X className=\\\"w-5 h-5\\\" />\\n           </button>\\n        </div>\\n      ) : (\\n        <div className=\\\"flex items-center flex-grow mr-2 min-w-0\\\">\\n          <input\\n            type=\\\"checkbox\\\"\\n            checked={todo.completed}\\n            onChange={() => onToggleComplete(todo.id)}\\n            className=\\\"mr-3 h-5 w-5 rounded border-gray-300 text-primary focus:ring-primary cursor-pointer shrink-0\\\"\\n            id={`todo-${todo.id}`}\\n          />\\n          <label\\n           htmlFor={`todo-${todo.id}`}\\n           className={`flex-grow cursor-pointer truncate ${todo.completed ? 'line-through text-gray-400' : 'text-gray-800'}`}\\n           title={todo.text}\\n          >\\n            {todo.text}\\n          </label>\\n        </div>\\n      )}\\n\\n      {!isEditing && (\\n        <div className=\\\"flex items-center gap-2 shrink-0\\\">\\n          <button\\n            onClick={handleEdit}\\n            className=\\\"text-blue-600 hover:text-blue-800 transition duration-150\\\" \\n            aria-label=\\\"Edit task\\\"\\n           >\\n            <Edit className=\\\"w-5 h-5\\\" />\\n          </button>\\n          <button\\n            onClick={() => onDeleteTodo(todo.id)}\\n            className=\\\"text-red-500 hover:text-red-700 transition duration-150\\\" \\n            aria-label=\\\"Delete task\\\"\\n          >\\n            <Trash className=\\\"w-5 h-5\\\" />\\n          </button>\\n        </div>\\n      )}\\n    </li>\\n  );\\n}\\n\\nexport default TodoItem;\\n\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/package.json\",\n    \"/vite.config.js\",\n    \"/tailwind.config.js\",\n    \"/postcss.config.js\",\n    \"/index.html\",\n    \"/src/main.js\",\n    \"/src/index.css\",\n    \"/src/App.js\",\n    \"/src/components/AddTodoForm.js\",\n    \"/src/components/TodoList.js\",\n    \"/src/components/TodoItem.js\"\n  ]\n}\n```"},
            ],
          },
        ],
  })
   
  
  
